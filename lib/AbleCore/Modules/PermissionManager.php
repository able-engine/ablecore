<?php

namespace AbleCore\Modules;

class PermissionManager {

	/**
	 * The generated list of permissions.
	 * @var array
	 */
	protected $generated = array();

	/**
	 * Creates a new instance of the PermissionManager class.
	 *
	 * @return static
	 */
	public static function init()
	{
		return new self();
	}

	/**
	 * Defines a new permission.
	 *
	 * @param string $machine_name The machine name of the permission.
	 * @param string $title        The title of the permission (human readable).
	 * @param string $description  Describe what the permission does.
	 * @param bool   $restrict     Whether or not to display a warning message about restricting access to
	 *                             trusted individuals.
	 * @param string $warning      An additional warning message to display to the user. This overrides
	 *                             the automatic warning generated by the $restrict parameter.
	 *
	 * @return static
	 */
	public function define($machine_name, $title, $description, $restrict = false, $warning = '')
	{
		$this->generated[$machine_name] = array(
			'title' => $title,
			'description' => $description,
			'restrict access' => $restrict,
			'warning' => $warning,
		);

		return $this;
	}

	/**
	 * Defines a permission describing administrative actions related to a module. The name of
	 * the permission can be checked later by using the PermissionManager::module() method.
	 *
	 * Generates a permission with the name "administer [module]," the title "Administer [module],"
	 * and the description "Perform administrative actions related to the [module] module."
	 *
	 * @param string $module_name The machine name of the module.
	 * @param bool   $restrict    Whether or not to restrict this permission to trusted individuals.
	 * @param string $warning     A custom warning message (overrides $restrict).
	 *
	 * @see define()
	 * @return PermissionManager
	 */
	public function defineModule($module_name, $restrict = false, $warning = '')
	{
		$machine_name_segment = str_replace('administer ', '', self::module($module_name));
		$title_segment = ucwords($machine_name_segment);
		return $this->define('administer ' . $machine_name_segment, t('Administer ' . $title_segment),
			t('Perform administrative actions related to the ' . $machine_name_segment . ' module.'),
			$restrict, $warning);
	}

	/**
	 * Finish the generation of the permission information.
	 *
	 * @return array
	 */
	public function fin()
	{
		return $this->generated;
	}

	/**
	 * Gets the primary permission name for the specified module.
	 *
	 * @param string $module_name The module to get the primary administrative name for.
	 *
	 * @return string The primary administrative name of the module.
	 */
	public static function module($module_name)
	{
		return 'administer ' . str_replace('_', ' ', $module_name);
	}

}
